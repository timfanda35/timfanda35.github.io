<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>traefik on Bear Su's Blog</title><link>https://blog.bear-su.dev/categories/traefik/</link><description>Recent content in traefik on Bear Su's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2015 - 2022 Bear Su's Blog</copyright><lastBuildDate>Tue, 22 Feb 2022 12:00:00 +0800</lastBuildDate><atom:link href="https://blog.bear-su.dev/categories/traefik/index.xml" rel="self" type="application/rss+xml"/><item><title>Traefik ForwardAuth 筆記</title><link>https://blog.bear-su.dev/2022/02/22/traefik-forwardauth-note/</link><pubDate>Tue, 22 Feb 2022 12:00:00 +0800</pubDate><guid>https://blog.bear-su.dev/2022/02/22/traefik-forwardauth-note/</guid><description>想要在 Traefik 設定呼叫外部服務來驗證請求是否可以轉發至後端。
示意圖 ¶ 當請求送往 Traefik 的時候，會先將請求轉發至 Auth Service，透過 Auth Service 回傳的 HTTP Status Code 來決定能不能將請求轉送至 Backend。
Client &amp;lt;--&amp;gt; Traefik &amp;lt;--&amp;gt; Backend ^ | Forward Auth v Auth Service 使用 Docker Compose 建立測試環境 ¶ 假設本地環境為 Linux-like 作業系統，並已安裝好 Docker、Docker Compose、curl 工具。
建立目錄
mkdir traefik-forward-demo cd traefik-forward-demo 新增 traefik 設定檔 ¶ 新增 conf/traefik.yml，設定可參考 server configuration。
api: insecure: true providers: file: directory: &amp;#34;/etc/traefik&amp;#34; watch: true 新增 conf/dynamic.yml，設定可參考 File provider configuration。為了測試方便，我們分別建立可以驗證成功與失敗的 routers 與 middlewares。</description></item></channel></rss>