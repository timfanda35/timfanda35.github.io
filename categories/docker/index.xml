<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on Bear Su's Blog</title><link>https://blog.bear-su.dev/categories/docker/</link><description>Recent content in docker on Bear Su's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2015 - 2022 Bear Su's Blog</copyright><lastBuildDate>Tue, 22 Feb 2022 12:00:00 +0800</lastBuildDate><atom:link href="https://blog.bear-su.dev/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Traefik ForwardAuth 筆記</title><link>https://blog.bear-su.dev/2022/02/22/traefik-forwardauth-note/</link><pubDate>Tue, 22 Feb 2022 12:00:00 +0800</pubDate><guid>https://blog.bear-su.dev/2022/02/22/traefik-forwardauth-note/</guid><description>想要在 Traefik 設定呼叫外部服務來驗證請求是否可以轉發至後端。
示意圖 ¶ 當請求送往 Traefik 的時候，會先將請求轉發至 Auth Service，透過 Auth Service 回傳的 HTTP Status Code 來決定能不能將請求轉送至 Backend。
Client &amp;lt;--&amp;gt; Traefik &amp;lt;--&amp;gt; Backend ^ | Forward Auth v Auth Service 使用 Docker Compose 建立測試環境 ¶ 假設本地環境為 Linux-like 作業系統，並已安裝好 Docker、Docker Compose、curl 工具。
建立目錄
mkdir traefik-forward-demo cd traefik-forward-demo 新增 traefik 設定檔 ¶ 新增 conf/traefik.yml，設定可參考 server configuration。
api: insecure: true providers: file: directory: &amp;#34;/etc/traefik&amp;#34; watch: true 新增 conf/dynamic.yml，設定可參考 File provider configuration。為了測試方便，我們分別建立可以驗證成功與失敗的 routers 與 middlewares。</description></item><item><title>Docker log on Google Compute Engine</title><link>https://blog.bear-su.dev/2022/02/20/docker-log-on-gce/</link><pubDate>Sun, 20 Feb 2022 12:00:00 +0800</pubDate><guid>https://blog.bear-su.dev/2022/02/20/docker-log-on-gce/</guid><description>在 Google Compute Engine 上安裝 Docker，想要將 Container 的 log 匯出至 Google Cloud Logging，可以將 Docker Log Driver 改成 gcplogs 後重新啟動 Docker service。
編輯 /etc/docker/daemon.json，在設定檔中加入 log-driver 設定：
{ &amp;#34;log-driver&amp;#34;:&amp;#34;gcplogs&amp;#34; } 記得重新啟動 Docker Service 載入變更後的設定：
sudo systemctl restart docker 這樣 Container 寫入 stdout 的 log 就會被送至 Google Cloud Logging。
其他相關的參數設定可參考文末連結。
Ref ¶ https://docs.docker.com/config/containers/logging/gcplogs/</description></item><item><title>gem install fail with docker in docker</title><link>https://blog.bear-su.dev/2022/02/16/gem-install-fail-with-dind/</link><pubDate>Wed, 16 Feb 2022 12:00:00 +0800</pubDate><guid>https://blog.bear-su.dev/2022/02/16/gem-install-fail-with-dind/</guid><description>打算照著 GitLab 文件，用 dind 的方式建置 Container Image，但在執行 CI Job 時，收到了錯誤訊息
You don't have write permission for the /usr/local/bundle .gitlab-ci.yml 內容(參考官方文件)如下：
build: image: docker:19.03.12 stage: build services: - docker:19.03.12-dind script: - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY - docker build -t $CI_REGISTRY/group/project/image:latest . - docker push $CI_REGISTRY/group/project/image:latest 專案使用的 Dockerfile 內容如下：
FROM ruby:2.7.4-alpine RUN apk add --no-cache --update build-base tzdata yarn mysql-dev libc6-compat RUN gem install bundler --no-document 查了一下，發現因為 Alpine 3.14 images can fail on Docker versions older than 20.</description></item></channel></rss>